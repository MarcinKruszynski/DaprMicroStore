@page "/fetchdata"
@inject DaprClient Dapr

@using webapp.Model

<h1>Products</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Price</th>
                <th>StockQuantity</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.Name</td>
                    <td>@product.Price</td>
                    <td>@product.StockQuantity</td>
                    <td>
                        <button class="btn btn-primary" @onclick="Book">BOOK</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ProductItem[] products;

    protected override async Task OnInitializedAsync()
    {
        var httpExtension = new HTTPExtension
        {
            Verb = HTTPVerb.Get
        };            

        products = await Dapr.InvokeMethodAsync<ProductItem[]>("products", "list", httpExtension);        
    }

    public async Task Book()
    {
        var product = products[0];

        var guid = Guid.NewGuid().ToString();

        var data = new BookingCheckout {
            RequestId = guid,
            ProductId = product.Id,
            ProductName = product.Name,
            UnitPrice = product.Price,
            Quantity = 1
        };

        var httpExtension = new HTTPExtension
        {
            Verb = HTTPVerb.Post
        };
        
        await Dapr.InvokeMethodAsync("bookings", "bookings/checkout", data, httpExtension);  
    }
}
